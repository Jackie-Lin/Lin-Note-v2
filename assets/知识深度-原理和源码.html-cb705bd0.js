import{_ as n,o as s,c as a,a as t}from"./app-1abbb6ea.js";const p="/Lin-Note-v2/assets/image-20230109175255221-1675343113378-7.3f9a7b56-44d1ded8.png",e="/Lin-Note-v2/assets/lifecycle.16e4c08e-1675342946107-2-1675342977248-5.1ae3c5f4-16e4c08e.png",o={},c=t(`<h1 id="知识深度-原理和源码" tabindex="-1"><a class="header-anchor" href="#知识深度-原理和源码" aria-hidden="true">#</a> 知识深度-原理和源码</h1><h2 id="_1-js-内存垃圾回收用什么算法" tabindex="-1"><a class="header-anchor" href="#_1-js-内存垃圾回收用什么算法" aria-hidden="true">#</a> 1. JS 内存垃圾回收用什么算法</h2><p>垃圾回收</p><ul><li>哪些不会被垃圾回收？</li></ul><p>-- 不会被垃圾回收 --</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// window 对象的属性 不会被回收</span>

<span class="token comment">// 闭包内存 不会回收</span>
<span class="token keyword">function</span> <span class="token function">getDataFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//闭包</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> get<span class="token punctuation">,</span> set <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getDataFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>垃圾回收的算法</p><ul><li>引用计数（之前 ，引用计数 等于 0，就会被回收）</li><li>标记清除（现代，从 window <code>根</code> 逐步开始遍历，能找到就保留，不能找到就删除）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 循环引用可能导致的内存泄露</span>
<span class="token comment">// IE6-7 内存泄漏的 bug</span>
<span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div1&#39;</span><span class="token punctuation">)</span>
div1<span class="token punctuation">.</span>a <span class="token operator">=</span> div1
div1<span class="token punctuation">.</span>someBigData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>闭包是内存泄漏吗？</p><ul><li>闭包不是内存泄漏，因为闭包的数据是不可以被回收的</li></ul></blockquote><h2 id="_2-js-内存泄漏如何检测-场景有哪些" tabindex="-1"><a class="header-anchor" href="#_2-js-内存泄漏如何检测-场景有哪些" aria-hidden="true">#</a> 2. JS 内存泄漏如何检测？场景有哪些？</h2><p>检测内存变化（浏览器如何操作？）</p><p><img src="`+p+`" alt="image-20230109175255221"></p><p>内存泄漏的场景有哪些？（Vue 为例）</p><ul><li>被全局变量、函数引用，组件销毁时未清除</li><li>被全局事件、定时器引用，组件销毁时未清除</li><li>被自定义事件引用，组件销毁时未清除</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Memory Leak Demo&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 数组 对象</span>
            <span class="token literal-property property">intervalId</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">printArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 全局变量</span>
        window<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr
        <span class="token comment">// 函数引用</span>
        window<span class="token punctuation">.</span><span class="token function-variable function">printArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> 
        <span class="token comment">// 定时器引用</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>printArr<span class="token punctuation">)</span>
        <span class="token comment">// 全局事件</span>
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>printArr<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// Vue2 - beforeDestroy</span>
    <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 全局变量 销毁</span>
        window<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token comment">// 函数引用 销毁</span>
        window<span class="token punctuation">.</span>printArr <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token comment">// 定时器引用 销毁</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 全局事件 销毁</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>printArr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展</p><ul><li>weakMap() 、weakSet 都是弱引用，有可能被垃圾回收清除掉</li></ul></blockquote><h2 id="_3-浏览器-和-node-js-的-event-loop-有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-浏览器-和-node-js-的-event-loop-有什么区别" aria-hidden="true">#</a> 3. 浏览器 和 node.js 的 event loop 有什么区别？</h2><p>单线程 和 异步</p><ul><li>JS 是单线程的（无论在浏览器还是 node.js）</li><li>浏览器中 JS 执行 和 DOM 渲染共用一个线程</li><li>异步（JS 单线程的解决方案）</li></ul><p>宏任务 和 微任务</p><ul><li><p>宏任务，如 setTimeout setInterval 网络请求</p></li><li><p>微任务，如 promise async/await</p></li><li><p>微任务在下一轮 DOM 渲染之前执行，宏任务在之后执行</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;new paragraph&#39;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length----&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 渲染之后</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length on timeout---&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;阻塞 timeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 渲染之前</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length on promise.then ---&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 打印结果</span>
<span class="token comment">// length---- 2</span>
<span class="token comment">// start</span>
<span class="token comment">// end</span>
<span class="token comment">// length on promise.then--- 2</span>
<span class="token comment">// length on timeout---- 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nodejs 异步</p><ul><li>Nodejs 同样使用 ES 语法，也是单线程，也是需要异步</li><li>异步任务也分：宏任务 + 微任务</li><li>但是，它的宏任务和微任务，分不同类型，有不同优先级</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// nodejs</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 宏任务</span>
<span class="token function">setTimediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;setImmediate&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 微任务</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise then&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nextTick&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 打印结果</span>
<span class="token comment">// end</span>
<span class="token comment">// nextTick</span>
<span class="token comment">// promise then</span>
<span class="token comment">// timeout</span>
<span class="token comment">// setImmediate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nodejs 宏任务类型和优先级</p><ul><li>Timers - setTimeout setInterval</li><li>I/O callbacks - 处理网络、流、TCP 的错误回调</li><li>Idle, prepare - 闲置状态（nodejs 内部使用）</li><li>Poll 轮询 - 执行 poll 中的 I/O 队列</li><li>Check 检查 - 存储 setImmediate 回调</li><li>Close callbacks - 关闭回调，如 socket.on(‘close’)</li></ul><p>nodejs 微任务类型和优先级</p><ul><li>包括：promise, async/await, process.nextTick</li><li>注意，process.nextTick 优先级最高</li></ul><blockquote><p>总结：nodejs event loop <code>事件循环</code></p><ul><li>执行同步代码</li><li>执行微任务（process.nextTick 优先级更高）</li><li>按顺序执行 6 个类型的宏任务（每个开始之前都执行当前的微任务）</li><li><code>推荐使用</code> setImmediate 代替 process.nextTick</li></ul></blockquote><h2 id="_4-vdom-真的很快吗" tabindex="-1"><a class="header-anchor" href="#_4-vdom-真的很快吗" aria-hidden="true">#</a> 4. vdom 真的很快吗？</h2><p>vdom 是什么？</p><ul><li>Virtual DOM，虚拟 DOM</li><li>用 JS 对象模拟 DOM 节点数据</li><li>由 React 最先推广使用</li></ul><p>Vue React 等框架的价值</p><ul><li>组件化</li><li>数据视图分离，数据驱动视图 --- 这是核心!</li><li>只关注业务数据，而不用再关系 DOM 变化</li><li>数据驱动视图，技术方案: vdom</li></ul><p>数据驱动视图的原理</p><ul><li><p>当 data 数据变化</p></li><li><p>diff算法，去对比 vnode(当前 node 节点) 与 oldVnode</p></li><li><p>找出要更新的点，去更新 DOM</p></li></ul><p>从执行速度的角度看</p><ul><li>jquery DOM节点操作 比 数据驱动视图更快</li></ul><p>从整个业务开发过程来看</p><ul><li>数据驱动视图，减低了项目维护更新成本，从这个方面来说，数据驱动视图更快</li></ul><blockquote><p>总结：</p><ul><li>vdom 并不快，JS 直接操作 DOM 才是最快的</li><li>但 “数据驱动视图” 要有合适的技术方案，不能全部 DOM 重建</li><li>vdom 就是目前最合适的技术方案（并不是因为它快，而是合适）</li></ul></blockquote><p><code>扩展: svelte 就不用 vdom</code></p><h2 id="_5-遍历一个数组用-for-和-foreach-哪个更快" tabindex="-1"><a class="header-anchor" href="#_5-遍历一个数组用-for-和-foreach-哪个更快" aria-hidden="true">#</a> 5. 遍历一个数组用 for 和 forEach 哪个更快？</h2><ul><li>for 更快</li><li>forEach 每次都要创建一个函数，而 for 不会创建函数</li><li>函数需要独立的typora作用域，会有额外的开销</li></ul><h2 id="_6-nodejs-如何开启进程-进程如何通讯" tabindex="-1"><a class="header-anchor" href="#_6-nodejs-如何开启进程-进程如何通讯" aria-hidden="true">#</a> 6. nodejs 如何开启进程，进程如何通讯？</h2><p>进程 proces vs 线程 thread</p><ul><li>进程，OS 进行资源分配和调度的最小单位，有独立内存空间</li><li>线程，OS 进行运算调度的最小单位，共享进程内存空间</li><li>JS 是单线程的，但可以开启多进程执行，如 WebWorker</li></ul><p>为何需要多进程？</p><ul><li>多核 CPU, 更适合处理多进程</li><li>内存较大，多个进程才能更好的利用（单进程有内存上线）</li><li>总之，“压榨” 机器资源，更快，更节省</li></ul><p>nodejs 如何开启进程，进程如何通讯？</p><ul><li>开启子进程 child_process.fork 和 cluster.fork</li><li>使用 send 和 on 传递消息</li></ul><p>--- 通过 fork 开启多进程 ---</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 主进程</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fork <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fork

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/get-sumn&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;主进程  id&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
        
        <span class="token comment">// 开启子进程</span>
        <span class="token keyword">const</span> computeProcess <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">&#39;./compute.js&#39;</span><span class="token punctuation">)</span>
        computeProcess<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;开始计算&#39;</span><span class="token punctuation">)</span>
        
        computeProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;主进程接收到的信息：&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;sum is&#39;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        
        computeProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子进程因报错而退出&#39;</span><span class="token punctuation">)</span>
            computeProcess<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;localhost: 3000&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 子进程 计算</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;子进程 id&#39;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;子进程接收到的信息：&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    
    <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 发送信息给主进程</span>
    process<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>--- 通过 cluster 开启多进程 ---</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cpuCoreLength <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>cluster<span class="token punctuation">.</span>isMaster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpuCoreLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启子进程</span>
    <span class="token punctuation">}</span>
    
    cluster<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token parameter">worker</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子进程退出&#39;</span><span class="token punctuation">)</span>
        cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//进程守护</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 多个子进程 端口会不会冲突？不会</span>
    <span class="token comment">// 因为多个子进程会共享一个 TCP 连接，提供一份网络服务</span>
    <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展：工作可以使用 <strong>PM2</strong> , 来开启多进程，进程守护</p></blockquote><h2 id="_7-请描述-js-bridge-的实现原理" tabindex="-1"><a class="header-anchor" href="#_7-请描述-js-bridge-的实现原理" aria-hidden="true">#</a> 7. 请描述 js-bridge 的实现原理</h2><p>什么是 JS Bridge?</p><ul><li>JS 无法直接调用 native API ( 获取视像头、获取相册等等接口 )</li><li>需要通过一些特定的 &quot;格式&quot; 来调用</li><li>这些 “格式” 就统称 JS-Bridge, 例如微信 JSSDK</li></ul><p>JS Bridge 的常见实现方式</p><ul><li>注册全局 API (不适用于 异步)</li><li>URL Scheme (适用于 所有情况)</li></ul><p>例如 uni-app（这个就是 URL Scheme 方式实现的）</p><ul><li>weixin:// 打开微信</li><li>weixin://dl/scan 扫一扫</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 封装 JS-bridge</span>
<span class="token keyword">const</span> sdk <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> onSuccess<span class="token punctuation">,</span> onError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span>
        iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">&#39;hidden&#39;</span>
        iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> content <span class="token operator">=</span> iframe1<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML
            onSuccess<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        iframe<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            iframe<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;my-app-name://&#39;</span>$<span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">?</span>data<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> onSuccess<span class="token punctuation">,</span> onError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;api/fn2&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> onSuccess<span class="token punctuation">,</span> onError<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>推荐使用 <code>URL Scheme</code></p></blockquote><h2 id="_8-requestidlecallback-和-request" tabindex="-1"><a class="header-anchor" href="#_8-requestidlecallback-和-request" aria-hidden="true">#</a> 8. requestIdleCallback 和 request</h2><p>由 React fiber 引起的关注</p><ul><li>组建树转换为链表，可分段渲染</li><li>渲染时可以暂停，去执行其他高优任务，空闲时再继续渲染</li><li>如何判断空闲？-- requestIdleCallback 这个 API</li></ul><p>requestIdleCallback 和 requestAnimationFrame 的区别</p><ul><li>requestAnimationFrame 每次渲染都会执行，高优</li><li>requestIdleCallback 空闲时才执行，低优</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// requestIdleCallback 和 requestAnimationFrame 如何使用
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>change<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    	<span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
        
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> curWidth <span class="token operator">=</span> <span class="token number">100</span>
            <span class="token keyword">const</span> maxWidth <span class="token operator">=</span> <span class="token number">400</span>
            
            <span class="token keyword">function</span> <span class="token function">addWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                curWidth <span class="token operator">=</span> curWidth <span class="token operator">+</span> <span class="token number">3</span>
                box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>curWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>curWidth <span class="token operator">&lt;</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>addWidth<span class="token punctuation">)</span> <span class="token comment">// 时间不用自己控制</span>
                    window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>addWidth<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">addWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>requestIdleCallback 和 requestAnimationFrame 两者是宏任务还是微任务？</p><ul><li>两者都是宏任务</li><li>要等待 DOM 渲染完成才执行，肯定是宏任务</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// setTimeout、requestIdleCallback、requestAnimationFrame 的执行顺序</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;requestIdleCallback&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;requestIdleCallback&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 打印结果</span>
<span class="token comment">// start</span>
<span class="token comment">// end</span>
<span class="token comment">// timeout</span>
<span class="token comment">// requestIdleCallback</span>
<span class="token comment">// requestIdleCallback</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-vue-每个生命周期都做了什么" tabindex="-1"><a class="header-anchor" href="#_9-vue-每个生命周期都做了什么" aria-hidden="true">#</a> 9. Vue 每个生命周期都做了什么？</h2><p>生命周期有哪些？</p><ul><li>八个生命周期</li><li>beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted</li></ul><p><img src="`+e+`" alt="img"></p><p>每个生命周期都干了什么？</p><p>beforeCreate</p><ul><li>创建一个空白的 Vue 实例</li><li>data method 尚未被初始化，不可使用</li></ul><p>created</p><ul><li>Vue 实例初始化完成，完成响应式绑定</li><li>data method 都初始化完成，可调用</li><li>尚未开始渲染模板</li></ul><p>beforeMount</p><ul><li>编译模板，调用 render 生成 vdom</li><li>还没有开始渲染 DOM</li></ul><p>mounted</p><ul><li>完成 DOM 渲染</li><li>组件创建完成</li><li>开始由 “创建阶段” 进入 “运行阶段”</li></ul><p>beforeUpdate</p><ul><li>data 发生变化之后</li><li>准备更新 DOM (尚未更新 DOM)</li></ul><p>updated</p><ul><li>data 发生变化，且 DOM 更新完成</li><li>不要在 updated 中修改 data，可能会导致死循环（ updata 中修改 data，重新 updata, 又修改 data ）</li></ul><p>beforeUnmount</p><ul><li>组件进入销毁阶段（尚未销毁，可正常使用）</li><li>可移除、解绑一些全局事件、自定义事件</li></ul><p>unmounted</p><ul><li>组件被销毁了</li><li>所有子组件也都被销毁了</li></ul><p>扩展：keep-alive 组件生命周期（created中 只创建一次）</p><ul><li>onActivated 缓存组件被激活</li><li>onDeactivated 缓存组件被隐藏</li></ul><p>连环问？</p><p>Vue 什么时候操作 DOM 比较合适？</p><ul><li>mounted 和 updated 都不能保证子组件全部挂载完成</li><li>使用 $nextTick 渲染 DOM</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 仅在整个视图都渲染之后才会运行的代码</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ajax 应该在哪个生命周期？</p><ul><li>有两个选择：created 和 mounted</li><li>推荐：mounted</li></ul><p>Vue3 Composition API 生命周期有何区别？</p><ul><li>setup 代替了 beforeCreate 和 created</li><li>使用 Hooks 函数的形式，如 mounted 改为 onMounted()</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Composition API</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> onUpdated<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-vue2、vue3、react-三者-diff-算法有何区别" tabindex="-1"><a class="header-anchor" href="#_10-vue2、vue3、react-三者-diff-算法有何区别" aria-hidden="true">#</a> 10. Vue2、Vue3、React 三者 diff 算法有何区别？</h2><p>diff 算法</p><ul><li><p>diff 算法很早就有</p></li><li><p>diff 算法应用广泛，例如 github 的 Pull Request 中的代码 diff</p></li><li><p>如果要严格 diff 两棵树，时间复杂度 O(n^3)，不可用</p></li></ul><p>Tree diff 的优化，优化后时间复杂度降为 O(n)</p><ul><li>只比较同一层级，不跨级比较</li><li>tag 不同则删除重建 (不再去比较内部的细节)</li><li>子节点通过 key 区分 (key 的重要性)</li></ul><p>学习技巧</p><ul><li>diff 算法非常复杂，不要深究细节</li><li>既然是三者的比较，说出他们最大的不同即可</li></ul><p>React diff - 仅右移</p><p>Vue2 - 双端比较（减少移动开销）</p><p>Vue3 - 最长递增子序列（减少 DOM 操作）</p><blockquote><p>diff 算法原理的核心在于 减少 DOM 操作</p></blockquote><p>连环问</p><p>Vue React 为何循环时必须使用 key ?</p><ul><li>vdom diff 算法会根据 key 判断元素是否删除？</li><li>匹配了 key, 则只移动元素 - 性能较好</li><li>为匹配 key, 则删除重建 - 性能较差</li></ul><h2 id="_11-vue-router-memoryhistory-abstract" tabindex="-1"><a class="header-anchor" href="#_11-vue-router-memoryhistory-abstract" aria-hidden="true">#</a> 11. Vue-router MemoryHistory (abstract)</h2><p>Vue-router 三种模式</p><ul><li>Hash (带 # 号，<code>locahost:8080/#/about</code>)</li><li>WebHistory (不带 # 号，<code>locahost:8080/about</code>)</li><li>MemoryHistory (V4 之前叫做 abstract history)</li></ul><p>MemoeyHistory 将路由当成一个整体一样，不会有路由 (url) 的变化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// MemoeyHistory 实现方式</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> Home
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
		<span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;About&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../views/About.vue&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    routes
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-讲下-异步" tabindex="-1"><a class="header-anchor" href="#_12-讲下-异步" aria-hidden="true">#</a> 12. 讲下 异步</h2><h3 id="什么是同步、异步" tabindex="-1"><a class="header-anchor" href="#什么是同步、异步" aria-hidden="true">#</a> 什么是同步、异步?</h3><p>同步: 按代码顺序执行</p><p>异步: 简单来说, 不按照代码顺序执行, 就是异步</p><h3 id="为了会有异步" tabindex="-1"><a class="header-anchor" href="#为了会有异步" aria-hidden="true">#</a> 为了会有异步</h3><p>异步是为了解决, JS 单线程阻塞问题的</p><h3 id="如何-异步-解决-js-单线程阻塞问题" tabindex="-1"><a class="header-anchor" href="#如何-异步-解决-js-单线程阻塞问题" aria-hidden="true">#</a> 如何 异步 解决 JS 单线程阻塞问题</h3><p>通过 事件循环 来解决, 事件循环的执行流程, 同步任务会进入主线程执行, 而异步任务会进入任务队列, 等到主线程任务执行完, 任务队列的任务就会放入主线程执行, 如此循环反复</p><h3 id="js-如何实现异步" tabindex="-1"><a class="header-anchor" href="#js-如何实现异步" aria-hidden="true">#</a> JS 如何实现异步?</h3><p>异步在于创建宏任务和微任务, 通过事件循环机制实现异步机制</p><p><strong>宏任务</strong></p><ul><li>定时器 setTimeout、setInterval</li><li>事件监听 (发布订阅)</li><li>回调函数</li></ul><p><strong>微任务</strong></p><ul><li>Promise</li><li>async/await</li></ul><p><strong>标准回答 (按异步编程进化史来说)</strong></p><p>所有异步任务都是在同步任务执行结束之后，从任务队列中依次取出执行。</p><p>回调函数是异步操作最基本的方法，比如 AJAX回调，回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误</p><p>return Promise 包装了一个异步调用并生成一个 Promise 实例，当异步调用返回的时候根据调用的结果分别调用实例化时传入的resolve 和 reject方法，then接收到对应的数据，做出相应的处理。Promise不仅能够捕获错误，而且也很好地解决了回调地狱的问题，缺点是无法取消 Promise，错误需要通过回调函数捕获。</p><p>Generator 函数是 ES6 提供的一种异步编程解决方案，Generator 函数是一个状态机，封装了多个内部状态，可暂停函数, yield可暂停，next方法可启动，每次返回的是yield后的表达式结果。优点是异步语义清晰，缺点是手动迭代<code>Generator</code>函数很麻烦，实现逻辑有点绕</p><p>async/await是基于Promise实现的，async/await使得异步代码看起来像同步代码，所以优点是，使用方法清晰明了，缺点是await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p><p>加分回答 JS 异步编程进化史：callback -&gt; promise -&gt; generator/yield -&gt; async/await。 async/await 函数对 Generator 函数的改进</p><p>体现在以下三点： - 内置执行器。 Generator 函数的执行必须靠执行器，而 async 函数自带执行器。</p><p>也就是说，async 函数的执行，与普通函数一模一样，只要一行。 更广的适用性。</p><p>yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 awt 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）, 更好的语义。</p><p>async 和 await，比起 星号 和 yield，语义更清楚了</p><p>async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。 目前使用很广泛的就是 promise 和 async/await</p><p>[注意]</p><p>宏任务、微任务 都是异步任务</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Generator 的使用</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorForLoop</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> genForLoop <span class="token operator">=</span> <span class="token function">generatorForLoop</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

genForLoop<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首先 console.log —— 0</span>
genForLoop<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
genForLoop<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
genForLoop<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
genForLoop<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

<span class="token comment">// Promise 的使用</span>
<span class="token keyword">function</span> <span class="token function">promise</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// async / await 使用</span>
<span class="token keyword">function</span> <span class="token function">getSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;获取成功&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3秒后输出：获取成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,157),i=[c];function l(u,r){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","知识深度-原理和源码.html.vue"]]);export{d as default};
