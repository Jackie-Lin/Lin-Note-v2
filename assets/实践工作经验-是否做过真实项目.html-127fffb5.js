import{_ as n,o as s,c as a,a as t}from"./app-1abbb6ea.js";const p="/Lin-Note-v2/assets/image-20230117175900455-1675344086973-28.f8b2c82f-1686560166176-58-d4dd47af.png",e="/Lin-Note-v2/assets/1686560317186-0d6139b0.jpg",l="/Lin-Note-v2/assets/image-20230117214626370-1675344096521-34.fb35e4dc-664af04c.png",o="/Lin-Note-v2/assets/image-20230117221335022-1675344099190-37.80459d7b-a22a0f4d.png",i="/Lin-Note-v2/assets/image-20230117221418640-1675344103033-40.5f870012-98f6ded3.png",c="/Lin-Note-v2/assets/image-20230117223235526-1675344106425-43.82e134df-3c1dd949.png",u={},r=t(`<h1 id="实践工作经验-是否做过真实项目" tabindex="-1"><a class="header-anchor" href="#实践工作经验-是否做过真实项目" aria-hidden="true">#</a> 实践工作经验-是否做过真实项目</h1><h2 id="_1-h5-页面如何进行-首屏-优化" tabindex="-1"><a class="header-anchor" href="#_1-h5-页面如何进行-首屏-优化" aria-hidden="true">#</a> 1. H5 页面如何进行 首屏 优化？</h2><p>路由懒加载</p><ul><li>使用于 SPA (不适用 MPA)</li><li>路由拆分，优先保证首页加载</li></ul><p>服务端渲染 SSR (成本高)</p><ul><li>传统的前后端分离 (SPA) 渲染页面的过程复杂</li><li>SSR 渲染页面过程简单，所有性能好</li><li>如果是纯 H5 页面，SSR 是性能优化的终极方案</li></ul><blockquote><p>前后端分离：客户端，获取 html 再获取 data，最终再渲染到页面上</p><p>SSR：服务端直接将渲染好的 HTML 发到客户端</p></blockquote><p>SSR 是一门 ”古老“ 的技术</p><ul><li>刚刚兴起 Web 1.0 时，就是 SSR 技术：PHP ASP JSP 等</li><li>Nuxt.js (Vue)</li><li>Next.js (React)</li></ul><p>APP 预取</p><ul><li>如果 H5 在 APP WebView 中展示，可使用 APP 预取</li><li>用户访问列表页时，APP 预加载文章首屏内容</li><li>用户进入 H5 页，直接从 APP 中获取内容，瞬间展示首屏</li></ul><p>分页</p><ul><li>针对列表页</li><li>默认只展示第一页内容</li><li>上划加载更多</li></ul><p>图片懒加载 lazyLoad</p><ul><li>针对详情页</li><li>默认只展示文本内容，然后触发图片懒加载</li><li>注意：提前设置图片尺寸，尽量只重绘不重排</li></ul><p>Hybrid</p><ul><li>提前将 HTML JS CSS 下载到 APP 内部</li><li>在 APP webview 中使用 file:// 协议加载页面文件</li><li>再用 Ajax 获取内容并展示 (也结合 APP 预取)</li></ul><blockquote><p>file:// 协议: 用于打开本地文件的协议</p><p>移动端 H5 要结合 App 能力去优化</p><p>严格来说，hybrid 不是 H5，但这里回答出来没问题</p></blockquote><p>总结：</p><ul><li>路由懒加载</li><li>服务端渲染 SSR</li><li>App 预取</li><li>分页</li><li>图片懒加载</li><li>Hybrid</li></ul><blockquote><p>扩展</p><ul><li>性能优化要配合分析、统计、评分等，做了事情要有结果</li><li>性能优化也要配合体验，如骨架屏，loading 动画等</li><li>不同的形式，有不同的优化方式，要积极和面试官沟通</li></ul></blockquote><h2 id="_2-后端一次性返回-10w-条数据-你该如何渲染" tabindex="-1"><a class="header-anchor" href="#_2-后端一次性返回-10w-条数据-你该如何渲染" aria-hidden="true">#</a> 2. 后端一次性返回 10w 条数据，你该如何渲染？</h2><p>设计不合理</p><ul><li>后端返回 10w 条数据，本身技术方案设计就不合理</li><li>主动和面试官沟通此事 (这也许是面试官所期待的)</li><li>如果面试官非要这么做，那再继续寻找解决方案</li></ul><p>浏览器能否处理 10w 条数据</p><ul><li>JS 没问题</li><li>渲染到 DOM 会非常卡顿</li></ul><p>自定义中间层</p><ul><li>自定义 nodejs 中间层，获取并拆分这 10w 条数据</li><li>前端对接 nodejs 中间层，而不是服务端</li><li>成本比较高</li></ul><p>虚拟列表 (不好实现)</p><ul><li>只渲染可视区域 DOM</li><li>其他隐藏区域不显示，只用 <code>&lt;div&gt;</code> 撑起高度</li><li>随着浏览器滚动，创建和销毁 DOM</li></ul><p>虚拟列表 - 第三方 lib</p><ul><li>虚拟列表实现起来非常复杂，可借用第三方 lib</li><li>Vue-virtual-scroll-list</li><li>React-virtualiszed</li></ul><blockquote><p>重点</p><ul><li>要主动沟通，表达观点 (也许正在考察你的沟通能力)</li><li>后端的问题，首先要用后端的思维去解决 -- 中间层</li><li>虚拟列表只是无奈的选择，实现复杂而效果不一定好 (低配手机)</li></ul></blockquote><h2 id="_3-前端常用的设计模式有哪些-并说明使用场景" tabindex="-1"><a class="header-anchor" href="#_3-前端常用的设计模式有哪些-并说明使用场景" aria-hidden="true">#</a> 3. 前端常用的设计模式有哪些？并说明使用场景？</h2><p>设计原则</p><ul><li>最重要的思想：开放封闭原则</li><li>对扩展开放</li><li>对修改封闭</li></ul><p>工厂模式</p><ul><li>用一个工厂函数，来创建实例，隐藏 new</li><li>如 jQuery 的 $ 函数</li><li>如 React createElement 函数</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 工厂模式示例</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if else</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单例模式</p><ul><li>全局唯一的实例 (无法生成第二个)</li><li>如 Vuex Redux 的 store</li><li>如全局唯一的 dialog modal</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 单例模式实例</span>
<span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> SingleTon <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SingleTon <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

s <span class="token operator">===</span> s1<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单例模式 - 扩展</p><ul><li>JS 是单线程的，创建单例很简单</li><li>Java 是支持多线程的，创建单例要考虑锁死线程</li><li>否则多个线程同时创建，单例就重复了 (多线程共享进程内存)</li></ul></blockquote><p>代理模式</p><ul><li>使用者不能直接访问对象，而是访问一个代理层</li><li>在代理层可以监听 get set 做很多事情</li><li>如 ES6 Proxy 实现 Vue3 响应式</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 代理模式实例</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">getting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>propKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>propKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察者模式实例</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 一个主题，一个观察者，主题变化之后触发观察者执行</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发布订阅 - 自定义事件</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 绑定</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 事件1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 事件2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发执行</span>
event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>温故知新: 绑定的事件要记得解除，防内存泄漏</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 事件1 */</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 事件2 */</span>
<span class="token punctuation">}</span>

<span class="token comment">// mounted 时绑定</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// beforeUnmount 时解绑</span>
event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span><span class="token punctuation">;</span>
event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;event-key&quot;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>装饰器模式</p><ul><li>原功能不变，增加一些新功能 (AOP 面向切面编程)</li><li>ES 和 Typescript 的 Decorator 语法</li><li>类装饰器，方法装饰器</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 类的装饰</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">testable</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
MyTestableClass<span class="token punctuation">.</span>isTestable<span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 方法的装饰</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  @<span class="token keyword">readonly</span>
  <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>nest.js 中比较完美的使用装饰器</p></blockquote><p>总结</p><ul><li>工厂模式</li><li>单例模式</li><li>代理模式</li><li>观察者模式</li><li>发布订阅模式</li><li>装饰器模式</li></ul><blockquote><p>注意</p><ul><li>经典设计模式有 23 个，这是基于后端写的，前端不是都常用</li><li>要结合应用场景</li></ul></blockquote><h2 id="_4-观察者模式和发布订阅模式的区别" tabindex="-1"><a class="header-anchor" href="#_4-观察者模式和发布订阅模式的区别" aria-hidden="true">#</a> 4. 观察者模式和发布订阅模式的区别？</h2><p>观察者模式</p><ul><li>Subject 和 Observer 直接绑定，没有中间媒介</li><li>如 addEventlistener 绑定事件</li></ul><p>发布订阅</p><ul><li>Publisher 和 Observer 互不相似，需要中间媒介 Event channel</li><li>如 EventBus 自定义事件</li></ul><p>区别</p><p><img src="`+p+`" alt="image-20230117175900455"></p><h2 id="_5-你在实际工作中-做过哪些-vue-优化" tabindex="-1"><a class="header-anchor" href="#_5-你在实际工作中-做过哪些-vue-优化" aria-hidden="true">#</a> 5. 你在实际工作中，做过哪些 Vue 优化？</h2><p>v-if 和 v-show</p><ul><li>v-if 彻底销毁组件</li><li>v-show 使用 CSS 隐藏组件</li><li>大部分情况下使用 v-if 更好，不要过度优化</li></ul><p>v-for 使用 key</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 而且，key 不要用 index --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(id, name) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 computed 缓存</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>export default { data() { return { msgList: [ ... ] //消息列表 } }, computed: {
// 未读消息的数量 unreadCount() { return this.msgList.filter(m =&gt; m.read ===
false).length } } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>keep-alive 缓存组件</p><ul><li>频繁切换的组件，如 tabs</li><li>不要乱用，缓存太多会占用内存，且不好 debug</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 简单实例
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num === 1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child2</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步组件</p><ul><li>针对体积较大的组件，如编辑器、复杂表格、复杂表单等</li><li>拆包，需要时异步加载，不需要时不加载</li><li>减少主包的体积，首页会加载更快</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 模拟加载比较大子包 Vue3 的写法 // 总页面 Home.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncComponentDemo</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncComponentDemo</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> AsyncComponentDemo <span class="token keyword">from</span> <span class="token string">&quot;@/components/AsyncComponentDemo/index&quot;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// 主 index.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;AsyncComponent&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Child</span><span class="token operator">:</span> <span class="token function">defuuneAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpacjChunkName: &quot;async-child&quot; */</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// 子 Child.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>async component child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Child&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由懒加载</p><ul><li>项目比较大，拆分路由，保证首页先加载</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// router/index.js - 路由表
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;About&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpacjChunkName: &quot;async-child&quot; */</span> <span class="token string">&quot;../views/About.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端渲染 SSR</p><ul><li>可使用 Nuxt.js</li><li>按需优化，使用 SSR 的成本比较高</li></ul><blockquote><p>总结</p><ul><li>v-if 和 v-show</li><li>v-for 使用 key</li><li>computed 缓存数据</li><li>keep-alive 缓存组件</li><li>异步组件 路由懒加载</li><li>SSR</li></ul></blockquote><h2 id="_6-你使用-vue-遇到过哪些坑" tabindex="-1"><a class="header-anchor" href="#_6-你使用-vue-遇到过哪些坑" aria-hidden="true">#</a> 6. 你使用 Vue 遇到过哪些坑？</h2><p>内存泄漏</p><ul><li>全局变量、全局事件、全局定时器</li><li>自定义事件</li></ul><p>Vue2 响应式的缺陷 (Vue3 不再有)</p><ul><li>data 新增属性用 Vue.set</li><li>data 删除属性用 Vue.delete</li><li>无法直接修改数据 arr[index] = value</li></ul><p>路由切换时 scroll 到顶部</p><ul><li>SPA 的通病，不仅仅是 Vue</li><li>如，列表页，滚动到第二屏，点击进入详情页</li><li>再返回到列表页 (此时组件重新渲染) 就 scroll 到顶部</li></ul><p>路由切换时 scroll 到顶部 - 解决方案</p><ul><li>在列表页缓存数据和 scrollTop 值</li><li>当再次返回列表页时，渲染组件，执行 scrollTo(xx)</li><li>终极方案: MAP + APP WebView（MAP 就是 webView 上再加一个 webView）</li></ul><blockquote><p>总结</p><ul><li>日常要注意记录总结，遇到坑就记录下，下次面试时就能用到</li></ul></blockquote><h2 id="_7-如何统一监听-vue-组件-报错" tabindex="-1"><a class="header-anchor" href="#_7-如何统一监听-vue-组件-报错" aria-hidden="true">#</a> 7. 如何统一监听 Vue 组件 报错？</h2><p>window.onerror (用于 JS 报错监听)</p><ul><li>全局监听所有 JS 报错</li><li>但它是 JS 级别的，识别不了 Vue 组件信息</li><li>捕捉一些 Vue 监听不到的错误</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 代码演示 对 windiow error 的监听的两种方式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一种方式</span>
    <span class="token comment">// msg: 错误信息、source: 那个文件夹、line: 哪一行、column: 哪一列，error: 错误的对象</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;window.onerror----&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> source<span class="token punctuation">,</span> line<span class="token punctuation">,</span> column<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 第二种方式</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;window error&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>errorCaptured 生命周期（Vue 的报错监听）</p><ul><li>监听所有下级组件的错误</li><li>返回 false 会阻止向上传播</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// App.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">errorCaptured</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;errorCaptured---&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 返回false 就不会向上传播，window.onerror 就获取不到</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>errorHandler（Vue 的报错监听）</p><ul><li>Vue 全局错误监听，所有组件错误都会汇总到这里</li><li>会忽略掉，window.onerror</li><li>但 errorCaptured 返回 false, 不会传播到这里</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 代码实例</span>
<span class="token comment">// main.js</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;errorHandler----&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展：</p><ul><li>wiondow.onerror 能监听异步报错</li><li>errorCaptured、errorHandler 只能监听非异步报错</li><li>Promise 为处理的 catch 需要 onunhandledrejection</li></ul></blockquote><blockquote><p>重点</p><ul><li>实际工作中，三者要结合使用</li><li>errorCaptured 监听一些重要、有风险组件的错误</li><li>window.onerror 和 errorHandler 候补全局监听</li></ul></blockquote><h2 id="_8-如何一个-h5-很慢-你该如何排查性能问题" tabindex="-1"><a class="header-anchor" href="#_8-如何一个-h5-很慢-你该如何排查性能问题" aria-hidden="true">#</a> 8. 如何一个 H5 很慢，你该如何排查性能问题？</h2><p>前端性能指标</p><ul><li>First Paint (FP) 第一次渲染</li><li>First Contentful Paint (FCP) 第一次有内容的渲染</li><li>First Meaningful Paint (FMP) 第一次有意义的渲染 --- 以弃用，改用 LCP</li><li>DomContentLoaded (DCL) 原生的一个浏览器事件 (页面 DOM 下载完成)</li><li>Largest Contentfull Paint (LCP) 页面最大的内容已经下载完了</li><li>Load (L) 整个页面及所有依赖资源如样式表和图片都已完成加载</li></ul><p>工具</p><ul><li>Chrome devTools</li><li></li></ul><p>Chrome devTools</p><ul><li>Performance 可查看上述性能指标，并有网页快照</li><li>NetWork 可以查看各个资源的加载时间</li></ul><p>Performance</p><p><img src="`+e+'" alt="1686560317186"></p><p>NetWork</p><p><img src="'+l+`" alt="image-20230117214626370"></p><p>Lighthouse</p><ul><li>非常流行的第三方性能评测工具</li><li>支持移动端和 PC</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// <span class="token function">npm</span> 使用方法
<span class="token function">npm</span> i lighthouse <span class="token parameter variable">-g</span>
lighthouse https://www.imooc.com/ <span class="token parameter variable">--view</span> <span class="token parameter variable">--preset</span><span class="token operator">=</span>desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+'" alt="image-20230117221335022"></p><p><img src="'+i+'" alt="image-20230117221418640"></p><p>识别问题：哪里慢</p><ul><li>加载慢？</li><li>渲染慢？</li></ul><p>加载慢示例</p><p><img src="'+c+'" alt="image-20230117223235526"></p><p>如果是网页加载慢</p><ul><li>优化服务端硬件配置，使用 CDN</li><li>路由懒加载，大组件异步加载 --- 减少主包的体积</li><li>优化 HTTP 缓存策略</li></ul><p>如果是网页渲染慢</p><ul><li>优化服务端接口 (如 Ajax 获取数据慢)</li><li>继续分析，优化前端组件内部的逻辑 (参考 vue React 优化)</li><li>服务端渲染 SSR</li></ul><p>持续跟进</p><ul><li>性能优化是一个循序渐进的过程，不像 bug 一次性解决</li><li>持续跟进统计结果，再逐步分析性能瓶颈，持续优化</li><li>可使用第三方统计服务，如阿里云 ARMS、百度统计</li></ul><blockquote><p>总结</p><ul><li>分析性能指标，找到慢的原因</li><li>对症下药，解决问题</li><li>持续跟进，持续优化</li><li>使用 ”二分法“，可逐步找出问题根源</li><li>要有 ”监控“、”持续跟进“ 的思维。解决了问题，还得保持住</li></ul></blockquote><h2 id="_9-你工作经历中-遇到过哪些项目难点-如何解决的" tabindex="-1"><a class="header-anchor" href="#_9-你工作经历中-遇到过哪些项目难点-如何解决的" aria-hidden="true">#</a> 9. 你工作经历中，遇到过哪些项目难点，如何解决的？</h2><blockquote><p>种一棵树，关键在 10 年前 和 现在</p></blockquote><p>遇到问题要注意积累</p><ul><li>每个人都会遇到难题，总有几个问题让你抓耳挠腮</li><li>日常要注意积累，解决了问题就自己写文章复盘一下</li></ul><p>如果之前没有积累</p><ul><li>回顾一下半年之内你遇到的一个难题 (肯定会有的)</li><li>想一下当时的解决方案, 以及解决之后的效果</li><li>写一篇文章记录一下 (必须写出来)</li></ul><p>答案模板</p><ul><li>描述问题：背景 + 现象 + 造成的影响</li><li>问题如何被解决：分析 + 解决</li><li>自己的成长：学到了什么 + 以后如何避免</li></ul><p>示例</p><ul><li>问题：编辑器只能回显 JSON 格式，而不支持老版本的 html 格式</li><li>解决：使用 HTML 属性表示 JSON 的数据，即可解决这个问题</li><li>成长：要考虑完整的输入输出 + 考虑旧版本用户 + 参考其他产品</li></ul>',143),k=[r];function d(v,m){return s(),a("div",null,k)}const g=n(u,[["render",d],["__file","实践工作经验-是否做过真实项目.html.vue"]]);export{g as default};
