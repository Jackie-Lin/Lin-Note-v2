import{_ as s,r as e,o as i,c as o,b as n,d as t,e as p,a as l}from"./app-1abbb6ea.js";const r={},c=l(`<h1 id="http-基本知识" tabindex="-1"><a class="header-anchor" href="#http-基本知识" aria-hidden="true">#</a> http-基本知识</h1><h2 id="_1-现代浏览器为何要禁用第三方-cookie" tabindex="-1"><a class="header-anchor" href="#_1-现代浏览器为何要禁用第三方-cookie" aria-hidden="true">#</a> 1. 现代浏览器为何要禁用第三方 cookie</h2><ul><li>为了用户的安全 (安全和隐私是浏览器永恒的话题)</li><li>第三方 cookie 会记录用户的行为和数据, 方便做广告</li><li>有些浏览器默认禁止, Chrome 增加了 SameSite (谷歌有广告)</li></ul><h2 id="_2-实现心跳检验-用于断线重连" tabindex="-1"><a class="header-anchor" href="#_2-实现心跳检验-用于断线重连" aria-hidden="true">#</a> 2. 实现心跳检验 - 用于断线重连</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Heartbeaet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// “心跳” 经量避免使用 setInterval</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;销毁成功&#39;</span><span class="token punctuation">)</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment">// 组件销毁</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-https-与-http-的区别" tabindex="-1"><a class="header-anchor" href="#_3-https-与-http-的区别" aria-hidden="true">#</a> 3. https 与 http 的区别</h2><ul><li>http：明文传输，信息不安全。用的是80端口, 应用层</li><li>https：有 SSL 证书，信息安全。用的443端口, 传输层</li></ul><h2 id="_4-常见的http协议请求头有哪些" tabindex="-1"><a class="header-anchor" href="#_4-常见的http协议请求头有哪些" aria-hidden="true">#</a> 4. 常见的HTTP协议请求头有哪些？</h2><p>常见的 HTTP 请求头有：</p><ul><li><strong>Accept</strong>: 接收的数据类型</li><li><strong>Accept-Language</strong>: 接收的语言</li><li><strong>Accept-Encoding</strong>: 客户端的编码方式, 通常指压缩方式</li><li><strong>Connection</strong>: 长连接还是短链接</li><li><strong>Host</strong>: 客户端的主机和端口号</li><li><strong>Referer</strong>: 请求来源网站</li><li><strong>Cache-Control</strong>: 缓存设置（重点）</li><li><strong>Cookie</strong>: 存储用户信息</li><li><strong>Origin</strong>: 表明来这哪个站点</li></ul><h2 id="_5-常见的http协议响应头有哪些" tabindex="-1"><a class="header-anchor" href="#_5-常见的http协议响应头有哪些" aria-hidden="true">#</a> 5. 常见的HTTP协议响应头有哪些？</h2><p>常见 HTTP 响应头有</p><ul><li><strong>Cache-Control</strong>：对应请求中 Cache-control</li><li><strong>Content-Type</strong>: text/html; charset=UTF-8, 诉客户端，资源文件的类型，还有字符编码，客户端通过 utf-8 对资源进行解码，然后对资源进行 html 解析</li><li><strong>Content-Encoding</strong>: 告诉客户端, 服务端发送的资源采用的什么样的压缩方式 gzip、deflate</li><li><strong>Date</strong>: 服务端发送资源时的服务器时间</li><li><strong>Server</strong>: 服务器和相对应的版本</li><li><strong>Connection</strong>: 长连接还是短链接</li></ul><h2 id="_6-http-1-0-与-http-2-0-的区别" tabindex="-1"><a class="header-anchor" href="#_6-http-1-0-与-http-2-0-的区别" aria-hidden="true">#</a> 6. HTTP 1.0 与 HTTP 2.0 的区别？</h2><p>HTTP 1.0：</p><ul><li>浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接</li></ul><p>HTTP 1.1：</p><ul><li>引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用</li><li>在同一个TCP连接里面，客户端可以同时发送多个请求</li><li>虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着</li><li>新增了一些请求方法</li><li>新增了一些请求头和响应头</li></ul><p>HTTP 2.0：</p><ul><li>采用二进制格式而非文本格式</li><li>完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行</li><li>使用报头压缩，降低开销</li><li>服务器推送</li></ul><h2 id="_7-http-状态码有哪些" tabindex="-1"><a class="header-anchor" href="#_7-http-状态码有哪些" aria-hidden="true">#</a> 7. HTTP 状态码有哪些?</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接受的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h2 id="_8-get-和-post-两种传参的区别" tabindex="-1"><a class="header-anchor" href="#_8-get-和-post-两种传参的区别" aria-hidden="true">#</a> 8. get 和 post 两种传参的区别?</h2><h3 id="安全性角度-可不说-等面试官问" tabindex="-1"><a class="header-anchor" href="#安全性角度-可不说-等面试官问" aria-hidden="true">#</a> 安全性角度 (可不说, 等面试官问)</h3><p>通常来说, post 比 get 更安全, 因为 post 请求参数是放在 body 里面的嘛, 但是 post body 中的数据也可以从开发者工具中看到, 所以也不能说安全吧</p><p>而且 get post 也都可以在 body 中放数据的, 只是因为浏览器限制, get 才无法放在 body 中, 我自己就试过使用 postman 在 get 的 body 中传数据, 后台服务也是可以收到的</p><h3 id="数据量角度-可不说-等面试官问" tabindex="-1"><a class="header-anchor" href="#数据量角度-可不说-等面试官问" aria-hidden="true">#</a> 数据量角度 (可不说, 等面试官问)</h3><p>常见的 get 和 post 区别还有GET传输的数据比较少，post 传输数据多；在 HTTP 规范中并没有 URL 的长度和传输的数据大小进行限制，但是在实际开发时，由于浏览器和服务器均对 URL 的长度进行了限制，因此表现出了 GET传输数据少的缺点</p><p>而对于 post 请求，由于数据放在请求体中，虽然理论上不会受到限制，但是实际开发中各个服务器也会对POST的数据大小进行一定的限制；比如 nginx 默认上传图片的大小是 2mb</p><p>因此不管GET还是POST，数据传输大小都会有限制，只是POST的传输大小相对于GET来说比较大</p><h3 id="从缓存角度" tabindex="-1"><a class="header-anchor" href="#从缓存角度" aria-hidden="true">#</a> 从缓存角度</h3><p>get 会缓存, 我们发送一个 get 请求, 后面相同的请求会 304 进行缓存下来</p><p>而 post 不会, 因为 post 请求大多用于数据提交, 需要数据到达服务器才进行操作</p><h3 id="从幂等性角度" tabindex="-1"><a class="header-anchor" href="#从幂等性角度" aria-hidden="true">#</a> 从幂等性角度</h3><p>一般情况下</p><p>get 请求无论请求多少次也不会有副作用, 也可以说是不会对资源产生影响, 因此我们说 get 请求具有幂等性</p><p>post 不止会去修改数据, 或者说是去影响资源变化, 所以我们说 post 有明显的 非幂等性</p><p>当然, 这是规范的说法, 因为 get 也是可以去修改资源, post 也是可以去查询资源</p><h3 id="从-tcp-的角度" tabindex="-1"><a class="header-anchor" href="#从-tcp-的角度" aria-hidden="true">#</a> 从 TCP 的角度</h3><p>get 请求会产生一个 TCP 数据包, get 请求发送 header 和 data 给服务端, 服务端返回一个 200, 请求成功</p><p>post 请求会产生两个 TCP 数据包, post 请求发送 header 给服务端, 服务端返回 100, 告诉客户端我已经准备接收数据, post 在发送一个 data 给服务端, 服务端返回 200, 请求成功 (当然啦这是只有特殊的浏览器才会这样, 一般浏览器不会这样)</p>`,41),d={href:"https://zhuanlan.zhihu.com/p/151440663",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"常见-http-请求有哪些-他们的区别是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常见-http-请求有哪些-他们的区别是什么","aria-hidden":"true"},"#"),t(" 常见 HTTP 请求有哪些？他们的区别是什么?")],-1),u=n("ol",null,[n("li",null,"get 请求, 常用于获取数据、查询资源"),n("li",null,"post 请求, 常用来提交数据, 上传文件等"),n("li",null,"head 请求, 类似于 get 请求, 只不过返回实体, 用于获取/查询资源信息"),n("li",null,"delete 请求, 用于请求服务器删除数据"),n("li",null,"put 请求, 从客户端向服务端传送的数据, 从而改变数据")],-1);function g(k,T){const a=e("ExternalLinkIcon");return i(),o("div",null,[c,n("p",null,[n("a",d,[t("如何回答面试官问的 GET 和 POST 区别这道送命题"),p(a)])]),h,u])}const m=s(r,[["render",g],["__file","http-基本知识.html.vue"]]);export{m as default};
